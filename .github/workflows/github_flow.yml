name: GitHub Flow Deployment

on:
  push:
    branches:
      - main
      - staging
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [ dev, staging, prod ]
      action:
        description: 'Apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options: [ apply, destroy ]
      confirm:
        description: 'Type DESTROY to confirm'
        required: false
        default: 'NO'

jobs:
  deploy-dev:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Deploy to dev
        run: |
          chmod +x ./*.sh
          # Export GitHub repository variables
          export CLONE_INSTANCE_NAME="${{ vars.CLONE_INSTANCE_NAME }}"
          export CLONED_INSTANCE_TYPE="${{ vars.CLONED_INSTANCE_TYPE }}"
          export CUSTOM_AMI_ID="${{ vars.CUSTOM_AMI_ID }}"
          export CLONED_INSTANCE_COUNT="${{ vars.CLONED_INSTANCE_COUNT }}"
          export ENVIRONMENT="${{ vars.ENVIRONMENT }}"
          export EC2_KEY_PAIR="${{ vars.EC2_KEY_PAIR }}"
          export EC2_SECURITY_GROUP="${{ vars.EC2_SECURITY_GROUP }}"
          export EXISTING_IAM_ROLE_NAME="${{ vars.EC2_IAM_ROLE }}"
          export CODEARTIFACT_TOKEN="${{ vars.CODEARTIFACT_TOKEN }}"
          export TF_STATE_BUCKET="${{ vars.TF_STATE_BUCKET }}"
          export AWS_DEFAULT_REGION="${{ vars.AWS_DEFAULT_REGION }}"
          export APP_IDENT_WITHOUT_ENV="${{ vars.APP_IDENT_WITHOUT_ENV }}"
          ENVIRONMENT=dev ./deploy.sh

  deploy-staging:
    if: >-
      (github.event_name == 'push' && github.ref == 'refs/heads/staging') ||
      (github.event_name == 'pull_request' && github.base_ref == 'staging' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Deploy to staging
        run: |
          chmod +x ./*.sh
          export CLONE_INSTANCE_NAME="${{ vars.CLONE_INSTANCE_NAME }}"
          export CLONED_INSTANCE_TYPE="${{ vars.CLONED_INSTANCE_TYPE }}"
          export CUSTOM_AMI_ID="${{ vars.CUSTOM_AMI_ID }}"
          export CLONED_INSTANCE_COUNT="${{ vars.CLONED_INSTANCE_COUNT }}"
          export ENVIRONMENT="${{ vars.ENVIRONMENT }}"
          export EC2_KEY_PAIR="${{ vars.EC2_KEY_PAIR }}"
          export EC2_SECURITY_GROUP="${{ vars.EC2_SECURITY_GROUP }}"
          export EXISTING_IAM_ROLE_NAME="${{ vars.EC2_IAM_ROLE }}"
          export CODEARTIFACT_TOKEN="${{ vars.CODEARTIFACT_TOKEN }}"
          export TF_STATE_BUCKET="${{ vars.TF_STATE_BUCKET }}"
          export AWS_DEFAULT_REGION="${{ vars.AWS_DEFAULT_REGION }}"
          export APP_IDENT_WITHOUT_ENV="${{ vars.APP_IDENT_WITHOUT_ENV }}"
          ENVIRONMENT=staging ./deploy.sh

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Deploy to Production
        run: |
          chmod +x ./*.sh
          export CLONE_INSTANCE_NAME="${{ vars.CLONE_INSTANCE_NAME }}"
          export CLONED_INSTANCE_TYPE="${{ vars.CLONED_INSTANCE_TYPE }}"
          export CUSTOM_AMI_ID="${{ vars.CUSTOM_AMI_ID }}"
          export CLONED_INSTANCE_COUNT="${{ vars.CLONED_INSTANCE_COUNT }}"
          export ENVIRONMENT="${{ vars.ENVIRONMENT }}"
          export EC2_KEY_PAIR="${{ vars.EC2_KEY_PAIR }}"
          export EC2_SECURITY_GROUP="${{ vars.EC2_SECURITY_GROUP }}"
          export EXISTING_IAM_ROLE_NAME="${{ vars.EC2_IAM_ROLE }}"
          export CODEARTIFACT_TOKEN="${{ vars.CODEARTIFACT_TOKEN }}"
          export TF_STATE_BUCKET="${{ vars.TF_STATE_BUCKET }}"
          export AWS_DEFAULT_REGION="${{ vars.AWS_DEFAULT_REGION }}"
          export APP_IDENT_WITHOUT_ENV="${{ vars.APP_IDENT_WITHOUT_ENV }}"
          ENVIRONMENT=prod ./deploy.sh

  ansible-configuration:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: |
      needs.deploy-dev.result == 'success' ||
      needs.deploy-staging.result == 'success' ||
      needs.deploy-production.result == 'success'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - name: Run Ansible Configuration
        run: |
          chmod +x ./_run_ansible.sh
          ./_run_ansible.sh
