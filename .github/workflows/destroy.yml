name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      confirm_destroy:
        description: 'Type "destroy" to confirm destruction'
        required: true
        type: string

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: './terraform'
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Select/Create Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.environment || 'dev' }} \
          || terraform workspace new ${{ github.event.inputs.environment || 'dev' }}
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Verify Destroy Confirmation
      if: github.event.inputs.confirm_destroy != 'destroy'
      run: |
        echo "Destroy not confirmed. Expected 'destroy', got '${{ github.event.inputs.confirm_destroy }}'"
        exit 1

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Clean up Terraform state
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        rm -f tfplan terraform.tfstate* .terraform.lock.hcl
        rm -rf .terraform/

    - name: Notify Destruction
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.ACCESS_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üóëÔ∏è Infrastructure Destroyed

            **Environment:** ${{ github.event.inputs.environment }}
            **Destroyed by:** @${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}

            All resources have been successfully destroyed and cleaned up.`
          })
