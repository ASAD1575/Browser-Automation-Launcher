---
- name: Bootstrap CW agent + start service + (optionally) run as a specific user
  hosts: windows
  gather_facts: no
  connection: amazon.aws.aws_ssm

  vars:
    # --- Transport hardening (critical) ---
    ansible_shell_type: powershell
    ansible_shell_executable: powershell.exe
    ansible_become: false                         # don't escalate until transport is confirmed
    ansible_aws_ssm_document_name: AWS-RunPowerShellScript
    ansible_aws_ssm_timeout: 1800                 # 30m overall
    ansible_aws_ssm_poll_interval: 3              # poll every 3s

    # --- Your service + logs ---
    app_service_name: "BrowserAutomationLauncher"
    cw_log_group_name: "/prod/Browser-Automation-Launcher/app"

    # --- Optional: run a command as a specific user (from env) ---
    run_user_actions: true
    become_username: "{{ lookup('env', 'TF_VAR_WINDOWS_USERNAME') | default('', true) }}"
    become_password: "{{ lookup('env', 'TF_VAR_WINDOWS_PASSWORD') | default('', true) }}"

  tasks:
    # ----------------------------
    # Verify SSM connectivity
    # ----------------------------
    - name: Ping the Windows instance (SSM)
      ansible.windows.win_ping:
      register: ping_result
      retries: 6
      delay: 10
      until: ping_result is success
      become: false

    # ----------------------------
    # (Optional) Trigger your scheduled task to ensure user session starts
    # ----------------------------
    - name: Ensure user is logged in for scheduled task to run
      ansible.windows.win_shell: |
        schtasks /run /tn "AutoUserLogin"
      when: run_user_actions | bool

    # ----------------------------
    # Install CloudWatch Agent (MSI with retry)
    # ----------------------------
    - name: Download CW agent MSI
      ansible.windows.win_get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi
        dest: C:\Windows\Temp\amazon-cloudwatch-agent.msi
        force: yes

    - name: Install CW agent (idempotent)
      ansible.windows.win_package:
        path: C:\Windows\Temp\amazon-cloudwatch-agent.msi
        arguments: /qn /norestart
        state: present

    - name: Ensure CW agent service running
      ansible.windows.win_service:
        name: AmazonCloudWatchAgent
        start_mode: auto
        state: started

    # ----------------------------
    # Read InstanceID and Name (IMDSv2)  **FIX: use stdout, not .content**
    # ----------------------------
    - name: Get IMDS token (best-effort)
      ansible.windows.win_shell: |
        $url = "http://169.254.169.254/latest/api/token"
        $headers = @{ "X-aws-ec2-metadata-token-ttl-seconds" = "21600" }
        try { Invoke-RestMethod -Uri $url -Method PUT -Headers $headers } catch { "" }
      register: imds_t
      changed_when: false
      failed_when: false

    - name: Read instance-id
      ansible.windows.win_shell: |
        $headers = @{}
        if ("{{ imds_t.stdout | trim }}") { $headers["X-aws-ec2-metadata-token"] = "{{ imds_t.stdout | trim }}" }
        Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id" -Headers $headers
      register: iid
      changed_when: false

    - name: Read Name tag (requires instance_metadata_tags=enabled on EC2)
      ansible.windows.win_shell: |
        $headers = @{}
        if ("{{ imds_t.stdout | trim }}") { $headers["X-aws-ec2-metadata-token"] = "{{ imds_t.stdout | trim }}" }
        try { Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/tags/instance/Name" -Headers $headers } catch { "" }
      register: iname
      changed_when: false
      failed_when: false

    - name: Set stream prefix
      ansible.builtin.set_fact:
        cw_stream_prefix: "{{ (iid.stdout | default('unknown-id')) | trim }}/{{ (iname.stdout | default('UnknownName')) | trim }}"

    # ----------------------------
    # Write local CW agent config (InstanceID/Name in streams)
    # ----------------------------
    - name: Ensure CW config dir exists
      ansible.windows.win_file:
        path: C:\ProgramData\Amazon\AmazonCloudWatchAgent
        state: directory

    - name: Render CW agent config
      ansible.windows.win_copy:
        dest: C:\ProgramData\Amazon\AmazonCloudWatchAgent\config.json
        content: |
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "C:\\Users\\Administrator\\Documents\\applications\\browser-automation-launcher\\logs\\monitor.log",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/monitor.log",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "C:\\Users\\Administrator\\Documents\\applications\\browser-automation-launcher\\logs\\app.log",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/app.log",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    }
                  ]
                },
                "windows_events": {
                  "collect_list": [
                    {
                      "event_levels": ["ERROR","WARNING"],
                      "event_format": "xml",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/EventLog/System",
                      "event_name": "System"
                    },
                    {
                      "event_levels": ["ERROR","WARNING"],
                      "event_format": "xml",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/EventLog/Application",
                      "event_name": "Application"
                    }
                  ]
                }
              }
            },
            "agent": { "metrics_collection_interval": 60, "run_as_user": "NT AUTHORITY\\\\SYSTEM", "debug": false }
          }
        force: yes

    - name: Restart CW agent with local config
      ansible.windows.win_shell: |
        & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a stop
        & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a start -m ec2 -c file:C:\ProgramData\Amazon\AmazonCloudWatchAgent\config.json

    # ----------------------------
    # Ensure your app service is Automatic + Started
    # ----------------------------
    - name: Start your service
      ansible.windows.win_service:
        name: "{{ app_service_name }}"
        start_mode: auto
        state: started
