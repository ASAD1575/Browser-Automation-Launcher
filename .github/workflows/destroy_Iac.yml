name: GitHub Flow Deployment

on:
  push:
    branches: [ main, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options: [ dev, staging, prod ]
      action:
        description: 'apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options: [ apply, destroy ]
      confirm:
        description: 'Type DESTROY to confirm (only used when action=destroy)'
        required: false
        default: 'NO'

jobs:
  deploy-dev:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (github.event.inputs.action == '' || github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Set Terraform env
        run: |
          source Iac/terraform/.env.global.terraform
          source Iac/terraform/.env.dev.terraform
          echo "TF_VAR_aws_region=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "TF_VAR_key_pair_name=$key_pair_name" >> $GITHUB_ENV
          echo "TF_VAR_terraform_state_bucket=$TERRAFORM_STATE_BUCKET" >> $GITHUB_ENV

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.8 }

      - name: Deploy to dev
        run: |
          chmod +x ./*.sh
          ENVIRONMENT=dev ./deploy.sh

  deploy-staging:
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/staging' && (github.event.inputs.action == '' || github.event.inputs.action == 'apply')) ||
      (github.event_name == 'pull_request' && github.base_ref == 'staging' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Set Terraform env
        run: |
          source Iac/terraform/.env.global.terraform
          source Iac/terraform/.env.staging.terraform
          echo "TF_VAR_aws_region=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "TF_VAR_key_pair_name=$key_pair_name" >> $GITHUB_ENV
          echo "TF_VAR_terraform_state_bucket=$TERRAFORM_STATE_BUCKET" >> $GITHUB_ENV

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.8 }

      - name: Deploy to staging
        run: |
          chmod +x ./*.sh
          ENVIRONMENT=staging ./deploy.sh

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v') && (github.event.inputs.action == '' || github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Set Terraform env
        run: |
          source Iac/terraform/.env.global.terraform
          source Iac/terraform/.env.prod.terraform
          echo "TF_VAR_aws_region=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "TF_VAR_key_pair_name=$key_pair_name" >> $GITHUB_ENV
          echo "TF_VAR_terraform_state_bucket=$TERRAFORM_STATE_BUCKET" >> $GITHUB_ENV

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.8 }

      - name: Deploy to Production
        run: |
          chmod +x ./*.sh
          ENVIRONMENT=prod ./deploy.sh

  destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'DESTROY'
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Set Terraform env
        run: |
          source Iac/terraform/.env.global.terraform
          source Iac/terraform/.env.${{ github.event.inputs.environment }}.terraform
          echo "TF_VAR_aws_region=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "TF_VAR_key_pair_name=$key_pair_name" >> $GITHUB_ENV
          echo "TF_VAR_terraform_state_bucket=$TERRAFORM_STATE_BUCKET" >> $GITHUB_ENV

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375299695019:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.9.8 }

      - name: Destroy
        run: |
          chmod +x ./*.sh
          ENVIRONMENT=${{ github.event.inputs.environment }} ./deploy.sh -d
