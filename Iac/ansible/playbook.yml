---
- name: Bootstrap CW agent + start service + (optionally) run as a specific user
  hosts: windows
  gather_facts: no
  connection: amazon.aws.aws_ssm  # Using the SSM connection plugin
  vars:
    # --- Your service + logs ---
    app_service_name: "BrowserAutomationLauncher"
    cw_log_group_name: "/prod/Browser-Automation-Launcher/app"

    # --- Optional: run a command as a specific user (from env) ---
    run_user_actions: true
    become_username: "{{ lookup('env', 'TF_VAR_WINDOWS_USERNAME') | default('', true) }}"
    become_password: "{{ lookup('env', 'TF_VAR_WINDOWS_PASSWORD') | default('', true) }}"

  tasks:
    # ----------------------------
    # Verify SSM connectivity
    # ----------------------------
    - name: Ping the Windows instance to verify connectivity
      ansible.windows.win_ping:
      retries: 5
      delay: 10
      until: result is succeeded

    # ----------------------------
    # Ensure user is logged in for scheduled task to run
    # ----------------------------
    - name: Ensure user is logged in for scheduled task to run (via SYSTEM)
      ansible.windows.win_command:
        cmd: |
          $command = "schtasks /run /tn 'AutoUserLogin'"  # Replace 'AutoUserLogin' with your Task Scheduler task name.
          Start-Process -FilePath "cmd.exe" -ArgumentList "/c $command" -Credential (New-Object System.Management.Automation.PSCredential('NT AUTHORITY\\SYSTEM', (ConvertTo-SecureString '' -AsPlainText -Force)))
      when: run_user_actions | bool

    # ----------------------------
    # Install CloudWatch Agent (MSI with retry)
    # ----------------------------
    - name: Download CW agent MSI
      ansible.windows.win_command:
        cmd: |
          Invoke-WebRequest -Uri "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi" -OutFile "C:\\Windows\\Temp\\amazon-cloudwatch-agent.msi"

    - name: Install CW agent (idempotent)
      ansible.windows.win_command:
        cmd: |
          Start-Process msiexec.exe -ArgumentList "/i C:\\Windows\\Temp\\amazon-cloudwatch-agent.msi /qn /norestart" -NoNewWindow -Wait

    - name: Ensure CW agent service running
      ansible.windows.win_service:
        name: AmazonCloudWatchAgent
        start_mode: auto
        state: started

    # ----------------------------
    # Read InstanceID and Name (IMDSv2)
    # ----------------------------
    - name: Get IMDS token
      ansible.windows.win_command:
        cmd: |
          $url = "http://169.254.169.254/latest/api/token"
          $headers = @{ "X-aws-ec2-metadata-token-ttl-seconds" = "21600" }
          $token = Invoke-RestMethod -Uri $url -Method PUT -Headers $headers
      register: imds_t
      failed_when: false

    - name: Read instance-id
      ansible.windows.win_command:
        cmd: |
          $instance_id = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id" -Headers @{ "X-aws-ec2-metadata-token" = "{{ imds_t.content }}" }
          Write-Output $instance_id
      register: iid

    - name: Read Name tag (requires instance_metadata_tags=enabled on EC2)
      ansible.windows.win_command:
        cmd: |
          $name_tag = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/tags/instance/Name" -Headers @{ "X-aws-ec2-metadata-token" = "{{ imds_t.content }}" }
          Write-Output $name_tag
      register: iname
      failed_when: false

    - name: Set stream prefix
      ansible.builtin.set_fact:
        cw_stream_prefix: "{{ (iid.content | default('unknown-id')) | trim }}/{{ (iname.content | default('UnknownName')) | trim }}"

    # ----------------------------
    # Write local CW agent config (InstanceID/Name in streams)
    # ----------------------------
    - name: Render CW agent config
      ansible.builtin.copy:
        dest: C:\ProgramData\Amazon\AmazonCloudWatchAgent\config.json
        content: |
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "C:\\\\Users\\\\Administrator\\\\Documents\\\\applications\\\\browser-automation-launcher\\\\logs\\\\monitor.log",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/monitor.log",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "C:\\\\Users\\\\Administrator\\\\Documents\\\\applications\\\\browser-automation-launcher\\\\logs\\\\app.log",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/app.log",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    }
                  ]
                },
                "windows_events": {
                  "collect_list": [
                    {
                      "event_levels": ["ERROR","WARNING"],
                      "event_format": "xml",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/EventLog/System",
                      "event_name": "System"
                    },
                    {
                      "event_levels": ["ERROR","WARNING"],
                      "event_format": "xml",
                      "log_group_name": "{{ cw_log_group_name }}",
                      "log_stream_name": "{{ cw_stream_prefix }}/EventLog/Application",
                      "event_name": "Application"
                    }
                  ]
                }
              }
            },
            "agent": { "metrics_collection_interval": 60, "run_as_user": "NT AUTHORITY\\\\SYSTEM", "debug": false }
          }
        force: yes

    - name: Restart CW agent with local config
      ansible.windows.win_command:
        cmd: |
          & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a stop
          & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a start -m ec2 -c file:C:\ProgramData\Amazon\AmazonCloudWatchAgent\config.json

    # ----------------------------
    # Ensure your app service is Automatic + Started
    # ----------------------------
    - name: Start your service
      ansible.windows.win_service:
        name: "{{ app_service_name }}"
        start_mode: auto
        state: started
